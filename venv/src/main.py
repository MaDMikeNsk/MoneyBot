import telebot
import keyboard as kb
import datetime as dt
import os
import webbrowser as wb
import pandas as pd
import csv

from src.databaseEngine import DatabaseEngine
from src.dbItem import *
from src.statement import Statement
from src import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(config.TOKEN)
db = DatabaseEngine()
statement = Statement()
# ============================================================
# TEST
test_post_1 = Posts_Simple(title='–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç', link='https://habr.com/ru/', 
                    bonus=2, time=15)
test_post_2 = Posts_Hard(title='–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç', link='https://habr.com/ru/company/lamptest/blog/505034/',
                    time=30, bonus=3)
test_post_3 = Posts_Simple(title='–£—á—ë–Ω—ã–µ –Ω–∞—à–ª–∏ –∫–ª–∞–¥',
                    link='https://iz.ru/843861/2019-02-09/v-astrakhanskoi-oblasti-uchenye-nashli-klad-na-meste-stolitcy-zolotoi-ordy',
                    bonus=2, time=20)
test_post_4 = Posts_Hard(title='–ü–∏—Ä–∞—Ç—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ —Å—É–¥–Ω–æ', link='https://ria.ru/20200226/1565204927.html', 
                    bonus=4, time=50)

test_channel_1 = Channels(chat_name='@rabynagalerah', title='–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (–†–∞–±—ã –≥–∞–ª–µ—Ä–Ω—ã–µ)', link='https://t.me/rabynagalerah')
test_channel_2 = Channels(chat_name='@devsp', title='–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (Data Sciense)', link='https://t.me/devsp')

test_link_simple = Links_Simple(title='–ü–µ—Ä–≤–∞—è –ø—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞', link='https://habr.com/ru/', time=15)
test_link_2_stage = Links_2_Stage(title='–ü–µ—Ä–≤–∞—è 2-x —Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞',
                                  link_1='https://habr.com/ru/',
                                  link_2='https://habr.com/ru/',
                                  time_1=15, time_2=20)
test_link_3_stage = Links_3_Stage(title='–ü–µ—Ä–≤–∞—è 3-x —Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞',
                                  link_1='https://habr.com/ru/',
                                  link_2='https://habr.com/ru/',
                                  link_3='https://habr.com/ru/',
                                  time_1=15, time_2=20, time_3=15)

#–¢–ï–°–¢–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–û–í –ò –ö–ê–ù–ê–õ–û–í –í –ë–ê–ó–£
# db.add_posts(test_post_1, test_post_2, test_post_3, test_post_4)
# db.add_channel(test_channel_1, test_channel_2)
# db.add_links(test_link_simple, test_link_2_stage, test_link_3_stage)
# TEST
# ============================================================



# Welcome!
@bot.message_handler(commands=['start'])
def send_welcome(message):
    text = '–ü—Ä–∏–≤–µ—Ç! –Ø Money_bot! –ü–æ–º–æ–≥–∞—é –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å...'
    bot.send_message(message.chat.id, text, reply_markup=kb.main_keyboard())
    if db.is_user_recorded(message.chat.id) == False:
        db.add_user(User(message.chat.id))

@bot.message_handler(commands=['import_channels'])
def welcome(message):
    text = '–î–≤–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
    bot.send_message(message.chat.id, text)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É
    @bot.message_handler(content_types=['document'])
    def import_ch_tasks(message):
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        src = "C:/Python/PycharmProjects/MoneyBot/files/" + message.document.file_name
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)

        with open(src, 'rb') as new_file:
            df = pd.read_csv(src, sep=';')
            dict_dataframe = df.to_dict()
        titles = []
        links = []
        for key, value in dict_dataframe.items():
            if key == 'title':
                for k, v in value.items():
                    titles.append(v)
            elif key == 'link':
                for k, v in value.items():
                    links.append(v)
        data = list(zip(titles, links))  # –ì–æ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å—Å—ã–ª–∫–∞)
        print(data)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑—É
        for ch in data:
            new_ch = Channels(ch[0], ch[1])
            db.add_channel(new_ch)
        bot.reply_to(message, "–ù–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(content_types=["text"])
def buttons_reply(message):
    user_id = message.chat.id
    if message.text == 'üìã –ó–∞–¥–∞–Ω–∏–µ':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞: üëá'
        bot.send_message(user_id, text, reply_markup=kb.tasks_keyboard())
    elif message.text == 'üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞':
        text = '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        bot.send_message(user_id, text, reply_markup=kb.main_keyboard())
    elif message.text == 'üíº –ë–∞–ª–∞–Ω—Å':
        text = db.balance(user_id)
        bot.send_message(user_id, text, reply_markup=kb.main_keyboard())
    elif message.text == 'üìö –û –±–æ—Ç–µ':
        text = '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\n' + \
               '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - https://t.me/Mike_Menshikov'
        bot.send_message(user_id, text, reply_markup=kb.main_keyboard())
    else:
        text = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –Ω–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é'
        bot.send_message(user_id, text, reply_markup=kb.main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    user_id = call.message.chat.id
    # ==================================================================================================================
    #                                           –ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ
    # ==================================================================================================================
    if call.data == 'subscribe':
        ch = db.get_next_channel(user_id)
        if ch['available'] == True:
            statement.set_statement(ch=ch['ch_info'])
            print(statement.__dict__)
            text = f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª '{ch['ch_info']['ch_title']}' –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!\n –ù–∞–≥—Ä–∞–¥–∞ - 2 –±–∞–ª–ª–∞"
            bot.send_message(user_id, text, reply_markup=kb.task_subscribe_keyboard(ch['ch_info']['ch_link']))
        else:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤—ã—Ö —Ç–≥-–∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ'
            bot.send_message(user_id, text)
            statement.reset_statement(ch='zero')

    elif call.data == 'get_tg_bonus':
        if statement.is_channel_active():
            chat_id = statement.get_ch_info()['chat_name']
            print(f'User_id = {user_id}')
            print(f"Chat_name - {chat_id}")
            try:
                statuss = ['creator', 'administrator', 'member']
                st = bot.get_chat_member(chat_id=chat_id, user_id=call.message.from_user.id).status
                print(st)
                if st in statuss:
                    bot.send_message(user_id, '–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞')
                    # db.record_bonus(user_id, 2)
                    # statement.reset_statement(ch='zero')
                else:
                    bot.send_message(user_id, f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {chat_id}")
            except Exception as e:
                bot.send_message(chat_id=user_id, text=f'–û—à–∏–±–∫–∞: {e}')
        else:
            text = '–ó–∞–¥–∞–Ω–∏–µ "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!\n –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)

    elif call.data == 'skip_ch':
        if statement.is_channel_active():
            bot.send_message(user_id, '***Channel skipped***')
            db.inc_ch_skip(user_id)
            ch = db.get_next_channel(user_id)
            if ch['available'] == True:
                statement.set_statement(ch=ch['ch_info'])
                text = f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª '{ch['ch_info']['ch_title']}' –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!\n " \
                       f"–ù–∞–≥—Ä–∞–¥–∞ - 2 –±–∞–ª–ª–∞"
                bot.send_message(user_id, text, reply_markup=kb.task_subscribe_keyboard(ch['ch_info']['ch_link']))
            else:
                text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤—ã—Ö —Ç–≥-–∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ'
                bot.send_message(user_id, text)
                statement.reset_statement(ch='zero')
        else:
            text = '–ó–∞–¥–∞–Ω–∏–µ "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!\n –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)
        
    elif call.data == 'cancel_ch':
        if statement.is_channel_active():
            text = '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
            bot.send_message(user_id, text)
            statement.reset_statement(ch='zero')
        else:
            text = '–ó–∞–¥–∞–Ω–∏–µ "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!\n –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)

    # ==================================================================================================================
    #                                               –ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê
    # ==================================================================================================================
    elif call.data == 'postview':
        CHOOSE_DIFF = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è:'
        bot.send_message(user_id, CHOOSE_DIFF, reply_markup=kb.postview_amount_keyboard())
        
        print(statement.__dict__)

    elif call.data == 'simple':
        post = db.get_next_post(user_id=user_id, complexity='simple')
        if post['available'] == True:
            statement.set_statement(post=post['post_info'])
            text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞ '{post['post_info']['post_title']}' –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.\n" + \
                    f"–ù–∞–≥—Ä–∞–¥–∞ - {post['post_info']['post_bonus']} –±–∞–ª–ª–∞"
            bot.send_message(user_id, text, reply_markup=kb.posttask_keyboard())
        else:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ü–û–°–¢–û–í –±–æ–ª—å—à–µ –Ω–µ—Ç.\n' + \
                   '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ...'
            bot.send_message(user_id, text)
            statement.reset_statement(post='zero')

    elif call.data == 'hard':
        post = db.get_next_post(user_id=user_id, complexity='hard')
        if post['available'] == True:
            statement.set_statement(post=post['post_info'])
            text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞ '{post['post_info']['post_title']}' –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.\n" + \
                   f"–ù–∞–≥—Ä–∞–¥–∞ - {post['post_info']['post_bonus']} –±–∞–ª–ª–∞"
            bot.send_message(user_id, text, reply_markup=kb.posttask_keyboard())
        else:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ü–û–°–¢–û–í –±–æ–ª—å—à–µ –Ω–µ—Ç.\n' + \
                   '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ...'
            bot.send_message(user_id, text)
            statement.reset_statement(post='zero')
    
    elif call.data == 'goto_post':
        if statement.is_post_active():
            statement.set_post_starttime(st=dt.datetime.now())
            text = db.get_post_description(post_id=statement.get_post_info()['post_id'],
                                    complexity=statement.get_post_info()['post_complexity'])
            bot.send_message(user_id, text, reply_markup=kb.postview_keyboard(statement.get_post_info()['post_url']))
        else:
            text = '–ó–∞–¥–∞–Ω–∏–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä –ü–û–°–¢–ê" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ'
            bot.send_message(user_id, text)
        
    elif call.data == 'get_post_bonus':
        if statement.is_post_active():
            post_time = dt.timedelta(seconds=statement.get_post_info()['post_time'])
            time = dt.datetime.now()
            post_info = statement.get_post_info()
            time_difference = time - post_info['start_time']
            if time_difference >= post_time:

                bonus = post_info['post_bonus']
                text = f"–ù–∞–≥—Ä–∞–¥–∞ –≤ {bonus} –±–∞–ª–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞!"
                db.record_bonus(user_id, bonus)
                db.inc_postview(user_id, complexity=post_info['post_complexity'])
                statement.reset_statement(post='zero')
                bot.send_message(user_id, text)
            else:
                text = f'–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞. –û—Å—Ç–∞–ª–æ—Å—å {post_time - time_difference} c'
                bot.send_message(user_id, text)
        else:
            text = '–ó–∞–¥–∞–Ω–∏–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞" –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ'
            bot.send_message(user_id, text)
            
    elif call.data == 'skip_post':
        if statement.is_post_active():
            bot.send_message(user_id, '***Post skipped***')
            post = {'available': False}
            post_compl = statement.get_post_info()['post_complexity']
            if post_compl == 'simple':
                db.inc_post_skip(user_id, complexity='simple')
                post = db.get_next_post(user_id, complexity='simple')
            elif post_compl == 'hard':
                db.inc_post_skip(user_id, complexity='hard')
                post = db.get_next_post(user_id, complexity='hard')

            if post['available'] == True:
                statement.set_statement(post=post['post_info'])
                text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞ '{post['post_info']['post_title']}' –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.\n" + \
                       f"–ù–∞–≥—Ä–∞–¥–∞ - {post['post_info']['post_bonus']} –±–∞–ª–ª–∞"
                bot.send_message(user_id, text, reply_markup=kb.posttask_keyboard())
            elif post['available'] == False:
                text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ü–û–°–¢–û–í –±–æ–ª—å—à–µ –Ω–µ—Ç.\n' + \
                       '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ...'
                bot.send_message(user_id, text)
                statement.reset_statement(post='zero')
        else:
            text = '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)

    elif call.data == 'cancel_post':
        if statement.is_post_active():
            text = '***–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ***'
            bot.send_message(user_id, text)
            statement.reset_statement(post='zero')
        else:
            text = '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)
    
    # ==================================================================================================================
    #                                             –ü–†–ò–ì–õ–ê–°–ò–¢–¨ –†–ï–§–ï–†–ê–õ–ê
    # ==================================================================================================================
    elif call.data == 'invite':
        text = '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ 1 –±–∞–ª–ª!\n' \
               'üì© –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/Mo_Tele_bot'
        bot.send_message(user_id, text)

    # ==================================================================================================================
    #                                              –ü–ï–†–ï–•–û–î –ü–û –°–°–´–õ–ö–ï
    # ==================================================================================================================
    elif call.data == 'clicklink':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è:'
        bot.send_message(user_id, text, reply_markup=kb.clicklink_amount_keyboard())

    elif call.data == 'link_simple':
        link = db.get_next_simple_link(user_id)

        if link['available'] == True:
            text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –°–°–´–õ–ö–ï –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ {link['link_info']['link_bonus']} –±–∞–ª–ª–∞.\n "
            bot.send_message(user_id, text, reply_markup=kb.click_1_stage_link_keyboard())
            statement.set_statement(link=link['link_info'])
            print(statement.__dict__)
        else:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –°–°–´–õ–û–ö –±–æ–ª—å—à–µ –Ω–µ—Ç.\n' + \
                   '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ...'
            bot.send_message(user_id, text)

    elif call.data == 'link_hard':
        pass

    elif call.data == 'goto_link':
        if statement.is_link_active():
            statement.set_1stage_link_starttime(st=dt.datetime.now())
            link_info = statement.get_link_info()
            text = f"–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {link_info['link_time']} —Å–µ–∫"
            bot.send_message(user_id, text, reply_markup=kb.linktask_keyboard(url=link_info['link_url']))
        else:
            text = '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)

    elif call.data == 'skip_link_simple':
        if statement.is_link_active():
            db.inc_1step_link_skip(user_id)
            link = db.get_next_simple_link(user_id)
            if link['available'] == True:
                text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –°–°–´–õ–ö–ï –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ {link['link_info']['link_bonus']} –±–∞–ª–ª–∞.\n "
                bot.send_message(user_id, text, reply_markup=kb.click_1_stage_link_keyboard())
                statement.set_statement(link=link['link_info'])
            else:
                text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –°–°–´–õ–û–ö –±–æ–ª—å—à–µ –Ω–µ—Ç.\n' + \
                       '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∑–∂–µ...'
                bot.send_message(user_id, text)
                statement.reset_statement(link='zero')
        else:
            text = '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)

    elif call.data == 'cancel_link':
        if statement.is_link_active():
            text = '***–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ***'
            bot.send_message(user_id, text)
            statement.reset_statement(link='zero')
        else:
            text = '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)

    elif call.data == 'get_link_bonus':
        if statement.is_link_active():
            link_info = statement.get_link_info()
            link_time = dt.timedelta(seconds=link_info['link_time'])
            time_now = dt.datetime.now()
            time_difference = time_now - link_info['start_time']
            if time_difference >= link_time:
                bonus = link_info['link_bonus']
                text = f"–ù–∞–≥—Ä–∞–¥–∞ –≤ {bonus} –±–∞–ª–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞!"
                db.record_bonus(user_id, bonus)
                db.inc_step1_linkview(user_id)
                bot.send_message(user_id, text)
                statement.reset_statement(link='zero')
            else:
                text = f'–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –°–°–´–õ–ö–ò. –û—Å—Ç–∞–ª–æ—Å—å {link_time - time_difference} c'
                bot.send_message(user_id, text)
        else:
            text = '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            bot.send_message(user_id, text)
    
    # ==================================================================================================================
    #                                           –û–¢–ü–†–ê–í–ò–¢–¨ –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    # ==================================================================================================================
    elif call.data == 'voicemsg':
        text = '–ó–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        bot.send_message(user_id, text)


if __name__ == '__main__':
    bot.polling(none_stop=True, timeout=5)
